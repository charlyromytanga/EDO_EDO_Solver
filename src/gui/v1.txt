import tkinter as tk
from tkinter import ttk

class EquationSolverApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Équation Différentielle Solver")

        # Calculer la taille de l'écran
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()

        # Définir la taille de la fenêtre (80% de l'écran)
        window_width = int(screen_width * 0.8)
        window_height = int(screen_height * 0.8)

        # Centrer la fenêtre
        x_coordinate = int((screen_width / 2) - (window_width / 2))
        y_coordinate = int((screen_height / 2) - (window_height / 2))

        # Appliquer les dimensions et positionner la fenêtre
        self.root.geometry(f"{window_width}x{window_height}+{x_coordinate}+{y_coordinate}")

        # Configurer le style
        style = ttk.Style()
        style.configure("TFrame", background="#B0E0E6")  # Teinte de bleu clair

        # Configurer la disposition principale
        self.main_frame = ttk.Frame(self.root)  # Utilisation de ttk.Frame sans bg
        self.main_frame.pack(fill=tk.BOTH, expand=True)

        # Partie gauche pour spécifier l'équation (40% de la largeur)
        self.left_frame = ttk.Frame(self.main_frame)  # Pas de largeur fixée ici
        self.left_frame.pack(side=tk.LEFT, fill=tk.Y, expand=False)  # Ne pas étendre, occuper 40%

        # Catégorie d'équation
        self.equation_type_label = tk.Label(self.left_frame, text="Type d'Équation:", background='#B0E0E6')  # Bleu clair
        self.equation_type_label.pack(pady=10)

        self.equation_type = tk.StringVar(value="EDO")  # Valeur par défaut

        # Boutons radio pour le type d'équation
        self.odo_radio = tk.Radiobutton(self.left_frame, text="EDO", variable=self.equation_type, value="EDO", background='#B0E0E6')
        self.pdo_radio = tk.Radiobutton(self.left_frame, text="EDP", variable=self.equation_type, value="EDP", background='#B0E0E6')

        # Disposition verticale des boutons radio
        self.odo_radio.pack(pady=5)  # Espacement vertical
        self.pdo_radio.pack(pady=5)  # Espacement vertical

        # Ordre de l'équation
        self.equation_order_label = tk.Label(self.left_frame, text="Ordre de l'Équation:", background='#B0E0E6')  # Bleu clair
        self.equation_order_label.pack(pady=10)

        self.equation_order = tk.StringVar(value="1")  # Valeur par défaut

        self.first_order_radio = tk.Radiobutton(self.left_frame, text="1er Ordre", variable=self.equation_order, value="1", background='#B0E0E6')
        self.second_order_radio = tk.Radiobutton(self.left_frame, text="2ème Ordre", variable=self.equation_order, value="2", background='#B0E0E6')

        # Disposition verticale des boutons radio
        self.first_order_radio.pack(pady=5)  # Espacement vertical
        self.second_order_radio.pack(pady=5)  # Espacement vertical

        # Zone de texte pour l'équation
        self.equation_label = tk.Label(self.left_frame, text="Entrez l'Équation:", background='#B0E0E6')  # Bleu clair
        self.equation_label.pack(pady=10)

        self.equation_entry = tk.Entry(self.left_frame)
        self.equation_entry.pack(pady=5, padx=5, fill=tk.X)  # Utiliser pack avec fill

        # Bouton de résolution
        self.solve_button = tk.Button(self.left_frame, text="Résoudre", command=self.solve_equation)
        self.solve_button.pack(pady=10)

        # Division noire entre les deux parties
        self.divider = tk.Frame(self.main_frame, width=2, bg='black')
        self.divider.pack(side=tk.LEFT, fill=tk.Y)  # Remplir verticalement

        # Partie droite pour la visualisation (60% de la largeur)
        self.right_frame = ttk.Frame(self.main_frame)  # Pas de largeur fixée ici
        self.right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)  # Étendre pour occuper 60%

        # Label de visualisation
        self.visualization_label = tk.Label(self.right_frame, text="Visualisation des Solutions", background='#B0E0E6')  # Bleu clair
        self.visualization_label.pack(pady=10)

        # Zone pour afficher les graphiques
        self.visualization_canvas = tk.Canvas(self.right_frame, bg='white')
        self.visualization_canvas.pack(fill=tk.BOTH, expand=True)

        # Partie inférieure pour les symboles mathématiques
        self.symbols_frame = ttk.Frame(self.left_frame)  # Pas besoin de bg ici
        self.symbols_frame.pack(pady=(10, 0), fill=tk.X)  # Un espacement en haut et remplissage horizontal

        self.symbols_label = tk.Label(self.symbols_frame, text="Symboles Mathématiques:", background='#B0E0E6')  # Bleu clair
        self.symbols_label.pack(pady=5)

        # Créer un cadre pour les dérivées
        self.derivative_frame = ttk.Frame(self.symbols_frame)
        self.derivative_frame.pack(pady=5)

        # Liste des boutons poussoirs pour les dérivées
        derivative_symbols = ["∂", "d/dx", "d²/dt²", "∂²/∂x²", "∂²/∂y²", "∂²/∂x∂y"]
        self.derivative_buttons = {}

        for symbol in derivative_symbols:
            button = tk.Button(self.derivative_frame, text=symbol, command=lambda s=symbol: self.select_symbol(s))
            button.pack(side=tk.LEFT, padx=5, pady=2)  # Disposition en ligne

        # Créer un cadre pour les symboles d'opération
        self.operation_frame = ttk.Frame(self.symbols_frame)
        self.operation_frame.pack(pady=5)

        # Liste des boutons poussoirs pour les opérations
        operation_symbols = ["+", "−", "*", "/", "="]
        self.operation_buttons = {}

        for symbol in operation_symbols:
            button = tk.Button(self.operation_frame, text=symbol, command=lambda s=symbol: self.select_symbol(s))
            button.pack(side=tk.LEFT, padx=5, pady=2)  # Disposition en ligne

    def select_symbol(self, symbol):
        print(f"Symbole sélectionné : {symbol}")

    def solve_equation(self):
        # Code pour résoudre l'équation
        equation = self.equation_entry.get()
        eq_type = self.equation_type.get()
        order = self.equation_order.get()
        print(f"Résolution de l'équation : {equation}, Type : {eq_type}, Ordre : {order}")

if __name__ == "__main__":
    root = tk.Tk()
    app = EquationSolverApp(root)
    root.mainloop()
