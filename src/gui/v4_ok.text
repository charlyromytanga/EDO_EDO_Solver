import tkinter as tk
from tkinter import ttk
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from scipy.stats import norm

from .gui_tkinter_onglet_parameters import ParametersWindow
from .gui_tkinter_onglet_visualisation import VisualizationFrame
from .gui_tkinter_onglet_export import ExportWindow
from .gui_tkinter_onglet_equation import EquationFrame  # Importez la nouvelle classe



class EquationSolverApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Résolveur d'Équations")
        self.root.geometry("1920x1080")  # Prendre toute la taille de l'écran

        # Style de la fenêtre
        style = ttk.Style()
        style.configure("TFrame", background="#B0E0E6")  # Teinte de bleu clair

        # Créer la barre de menu
        self.menu_bar = tk.Menu(root)
        root.config(menu=self.menu_bar)

        # Sous-menu pour les Équations
        equation_menu = tk.Menu(self.menu_bar, tearoff=0)
        equation_menu.add_command(label="Ouvrir Équation", command=self.open_equation_window)
        self.menu_bar.add_cascade(label="Équation", menu=equation_menu)

        # Sous-menu pour les Paramètres
        parameters_menu = tk.Menu(self.menu_bar, tearoff=0)
        parameters_menu.add_command(label="Ouvrir Paramètres", command=self.open_parameters_window)
        self.menu_bar.add_cascade(label="Paramètres", menu=parameters_menu)

        # Sous-menu pour la Visualisation
        visualization_menu = tk.Menu(self.menu_bar, tearoff=0)
        visualization_menu.add_command(label="Visualiser Surface", command=self.show_default_visualization)
        self.menu_bar.add_cascade(label="Visualisation", menu=visualization_menu)

        # Sous-menu pour l'Exportation
        export_menu = tk.Menu(self.menu_bar, tearoff=0)
        export_menu.add_command(label="Exporter en PDF (FR)", command=lambda: self.export_report("fr"))
        export_menu.add_command(label="Exporter en PDF (EN)", command=lambda: self.export_report("en"))
        self.menu_bar.add_cascade(label="Exporter un Rapport", menu=export_menu)

        # Frame principal
        self.main_frame = ttk.Frame(self.root)
        self.main_frame.pack(fill=tk.BOTH, expand=True)

        # Diviser la fenêtre principale en deux parties
        self.left_frame = ttk.Frame(self.main_frame)
        self.left_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        self.right_frame = ttk.Frame(self.main_frame)
        self.right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)

        # Séparer les sections par un trait noir
        self.separator = ttk.Separator(self.main_frame, orient='vertical')
        self.separator.pack(side=tk.LEFT, fill=tk.Y)

        # Sections de la partie gauche
        # Section haute
        self.top_left_frame = ttk.Frame(self.left_frame)
        self.top_left_frame.pack(side=tk.TOP, fill=tk.BOTH, expand=True, padx=5, pady=5)
        self.top_left_label = tk.Label(self.top_left_frame, text="Type d'équation", background="#B0E0E6", font=("Arial", 14))
        self.top_left_label.pack(pady=20)

        # Section centre
        self.center_left_frame = ttk.Frame(self.left_frame)
        self.center_left_frame.pack(side=tk.TOP, fill=tk.BOTH, expand=True, padx=5, pady=5)
        self.center_left_label = tk.Label(self.center_left_frame, text="La saisie", background="#B0E0E6", font=("Arial", 14))
        self.center_left_label.pack(pady=20)

        # Section basse
        self.bottom_left_frame = ttk.Frame(self.left_frame)
        self.bottom_left_frame.pack(side=tk.TOP, fill=tk.BOTH, expand=True, padx=5, pady=5)
        self.bottom_left_label = tk.Label(self.bottom_left_frame, text="Les paramètres", background="#B0E0E6", font=("Arial", 14))
        self.bottom_left_label.pack(pady=20)

        # Ajouter des contenus interactifs
        self.create_left_section_content()

        # Section droite (affichage de la surface des solutions)
        self.visualization_frame = ttk.Frame(self.right_frame)
        self.visualization_frame.pack(fill=tk.BOTH, expand=True)

        # Afficher un message d'accueil dans la partie haute gauche
        self.main_label = tk.Label(self.top_left_frame, text="", background="#B0E0E6", font=("Arial", 14))
        self.main_label.pack(pady=20)

        # Visualisation par défaut de l'actif financier
        self.show_default_visualization()

    def create_left_section_content(self):
        """Ajouter des boutons radio et des champs de saisie en deux colonnes dans chaque section gauche."""
        # Variables pour les boutons radio
        self.radio_var_top = tk.StringVar(value="Option1")
        self.radio_var_center = tk.StringVar(value="OptionA")
        self.radio_var_bottom = tk.StringVar(value="Param1")

        # Section haute : boutons radio et champs de saisie
        top_option1_frame = ttk.Frame(self.top_left_frame)
        top_option1_frame.pack(side=tk.TOP, fill=tk.X, padx=5, pady=5)
        tk.Radiobutton(top_option1_frame, text="Option 1", variable=self.radio_var_top, value="Option1").pack(side=tk.LEFT)
        tk.Entry(top_option1_frame).pack(side=tk.RIGHT, padx=5)

        top_option2_frame = ttk.Frame(self.top_left_frame)
        top_option2_frame.pack(side=tk.TOP, fill=tk.X, padx=5, pady=5)
        tk.Radiobutton(top_option2_frame, text="Option 2", variable=self.radio_var_top, value="Option2").pack(side=tk.LEFT)
        tk.Entry(top_option2_frame).pack(side=tk.RIGHT, padx=5)

        # Section centre : boutons radio et champs de saisie
        center_optionA_frame = ttk.Frame(self.center_left_frame)
        center_optionA_frame.pack(side=tk.TOP, fill=tk.X, padx=5, pady=5)
        tk.Radiobutton(center_optionA_frame, text="Option A", variable=self.radio_var_center, value="OptionA").pack(side=tk.LEFT)
        tk.Entry(center_optionA_frame).pack(side=tk.RIGHT, padx=5)

        center_optionB_frame = ttk.Frame(self.center_left_frame)
        center_optionB_frame.pack(side=tk.TOP, fill=tk.X, padx=5, pady=5)
        tk.Radiobutton(center_optionB_frame, text="Option B", variable=self.radio_var_center, value="OptionB").pack(side=tk.LEFT)
        tk.Entry(center_optionB_frame).pack(side=tk.RIGHT, padx=5)

        # Section basse : boutons radio et champs de saisie
        bottom_param1_frame = ttk.Frame(self.bottom_left_frame)
        bottom_param1_frame.pack(side=tk.TOP, fill=tk.X, padx=5, pady=5)
        tk.Radiobutton(bottom_param1_frame, text="Paramètre 1", variable=self.radio_var_bottom, value="Param1").pack(side=tk.LEFT)
        # Variables pour les boutons radio
        # self.radio_var_top = tk.StringVar(value="Option1")
        # self.radio_var_center = tk.StringVar(value="OptionA")
        # self.radio_var_bottom = tk.StringVar(value="Param1")

# Déclaration de la variable pour les boutons radio à droite
        self.radio_var_top = tk.StringVar()
        self.radio_var_right = tk.StringVar()

        # Section haute : boutons radio
        top_option1_frame = ttk.Frame(self.top_left_frame)
        top_option1_frame.pack(side=tk.TOP, fill=tk.X, padx=5, pady=5)

        # Créer un Frame pour les boutons radio à gauche
        radio_frame_left = ttk.Frame(top_option1_frame)
        radio_frame_left.pack(side=tk.LEFT)

        # Créer un Radiobutton à gauche
        tk.Radiobutton(radio_frame_left, text="EDO", variable=self.radio_var_top, value="Option1").pack(anchor=tk.W)
        tk.Radiobutton(radio_frame_left, text="EDP", variable=self.radio_var_top, value="Option2").pack(anchor=tk.W)

        # Créer un Frame pour les boutons radio à droite
        radio_frame_right = ttk.Frame(top_option1_frame)
        radio_frame_right.pack(side=tk.RIGHT)

        # Créer des Radiobuttons à droite
        tk.Radiobutton(radio_frame_right, text="Linéaire", variable=self.radio_var_right,).pack(anchor=tk.W)
        tk.Radiobutton(radio_frame_right, text="Non Linéaire", variable=self.radio_var_right).pack(anchor=tk.W)


        # top_option2_frame = ttk.Frame(self.top_left_frame)
        # top_option2_frame.pack(side=tk.TOP, fill=tk.X, padx=5, pady=5)
        # tk.Radiobutton(top_option2_frame, text="EDP", variable=self.radio_var_top, value="Option2").pack(side=tk.LEFT)
        # tk.Entry(top_option2_frame).pack(side=tk.RIGHT, padx=5)

        # Section centre : boutons radio et champs de saisie
        center_optionA_frame = ttk.Frame(self.center_left_frame)
        center_optionA_frame.pack(side=tk.TOP, fill=tk.X, padx=5, pady=5)
        tk.Radiobutton(center_optionA_frame, text="Option A", variable=self.radio_var_center, value="OptionA").pack(side=tk.LEFT)
        tk.Entry(center_optionA_frame).pack(side=tk.RIGHT, padx=5)

        center_optionB_frame = ttk.Frame(self.center_left_frame)
        center_optionB_frame.pack(side=tk.TOP, fill=tk.X, padx=5, pady=5)
        tk.Radiobutton(center_optionB_frame, text="Option B", variable=self.radio_var_center, value="OptionB").pack(side=tk.LEFT)
        tk.Entry(center_optionB_frame).pack(side=tk.RIGHT, padx=5)

        # Section basse : boutons radio et champs de saisie
        bottom_param1_frame = ttk.Frame(self.bottom_left_frame)
        bottom_param1_frame.pack(side=tk.TOP, fill=tk.X, padx=5, pady=5)
        tk.Radiobutton(bottom_param1_frame, text="Paramètre 1", variable=self.radio_var_bottom, value="Param1").pack(side=tk.LEFT)
        tk.Entry(bottom_param1_frame).pack(side=tk.RIGHT, padx=5)

        bottom_param2_frame = ttk.Frame(self.bottom_left_frame)
        bottom_param2_frame.pack(side=tk.TOP, fill=tk.X, padx=5, pady=5)
        tk.Radiobutton(bottom_param2_frame, text="Paramètre 2", variable=self.radio_var_bottom, value="Param2").pack(side=tk.LEFT)
        tk.Entry(bottom_param2_frame).pack(side=tk.RIGHT, padx=5)

    def black_scholes_call(self, S, K, T, r, sigma):
        """Calcule le prix d'une option d'achat avec le modèle Black-Scholes."""
        d1 = (np.log(S / K) + (r + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))
        d2 = d1 - sigma * np.sqrt(T)
        call_price = (S * norm.cdf(d1) - K * np.exp(-r * T) * norm.cdf(d2))
        return call_price

    def show_default_visualization(self):
        """Visualisation de la surface des solutions d'actifs financiers par défaut."""
        self.clear_visualization()  # Clear previous visualization
        
        # Paramètres
        K = 100  # Prix d'exercice
        T = 1    # Temps jusqu'à l'expiration (en années)
        r = 0.05 # Taux d'intérêt (5%)
        sigma = np.linspace(0.1, 0.5, 100)  # Volatilité
        S = np.linspace(50, 150, 100)        # Prix de l'actif sous-jacent

        # Créer une grille de prix de l'actif sous-jacent et de volatilité
        S_grid, sigma_grid = np.meshgrid(S, sigma)
        call_prices = self.black_scholes_call(S_grid, K, T, r, sigma_grid)

        # Créer un graphique en 3D
        fig = Figure(figsize=(8, 6), dpi=100)
        ax = fig.add_subplot(111, projection='3d')

        # Tracer la surface
        ax.plot_surface(S_grid, sigma_grid, call_prices, cmap='viridis')

        # Ajouter des labels
        ax.set_title("Prix d'une Option d'Achat (Black-Scholes)")
        ax.set_xlabel("Prix de l'Actif Sous-Jacent (S)")
        ax.set_ylabel("Volatilité (σ)")
        ax.set_zlabel("Prix de l'Option (Call Price)")

        # Créer un canvas pour afficher le graphique dans Tkinter
        canvas = FigureCanvasTkAgg(fig, master=self.visualization_frame)
        canvas.draw()
        canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)

    def clear_visualization(self):
        """Effacer la visualisation précédente."""
        for widget in self.visualization_frame.winfo_children():
            widget.destroy()

    def open_equation_window(self):
        """Ouvrir la fenêtre des équations."""
        EquationWindow(self.left_frame)  # Ouvre l'onglet des équations dans la partie gauche

    def open_parameters_window(self):
        """Ouvrir la fenêtre des paramètres."""
        equation_window = EquationFrame(self.root)
        ParametersWindow(self.left_frame)  # Ouvre l'onglet des paramètres dans la partie gauche

    def export_report(self, lang):
        """Exporter le rapport en fonction de la langue sélectionnée."""
        if lang == "fr":
            # Logic to export the report in French
            print("Exporter le rapport en français.")
        else:
            # Logic to export the report in English
            print("Exporting the report in English.")

        ExportWindow(self.left_frame)  # Ouvre l'onglet d'exportation dans la partie gauche

if __name__ == "__main__":
    root = tk.Tk()
    app = EquationSolverApp(root)
    root.mainloop()
